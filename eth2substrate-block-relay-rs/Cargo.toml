[package]
name = "eth2-to-substrate-relay"
version = { workspace = true }
edition = { workspace = true }
license = { workspace = true }
authors = { workspace = true }

[dependencies]
eth-types = { path = "../crates/eth-types", features = ["eth2"] }
tree-hash = { package = "webb-tree-hash",  path = "../crates/tree-hash" }
merkle-proof = { package = "webb-merkle-proof",  path = "../crates/merkle-proof" }
consensus-types = { package = "webb-consensus-types", path = "../crates/consensus-types" }
eth-rpc-client = { package = "webb-eth-rpc-client", path = "../crates/eth-rpc-client" }
eth2-pallet-init = { package = "webb-eth2-pallet-init", path = "../crates/eth2-pallet-init" }
finality-update-verify = { package = "webb-finality-update-verify", path = "../crates/finality-update-verify" }
lc-relay-config = { package = "webb-lc-relay-config", path = "../crates/lc-relay-config" }
lc-relayer-context = { package = "webb-lc-relayer-context", path = "../crates/lc-relayer-context" }

types =  { workspace = true }
eth2_hashing =  { package = "ethereum_hashing", version = "1.0.0-beta.2" }
eth2_ssz =  { package = "ethereum_ssz", version = "0.5.0", features = ["arbitrary"] }
webb = { workspace = true }
webb-proposals ={ workspace = true }
anyhow = { workspace = true }
funty = { workspace = true }
sp-keyring = { version = "18.0.0", default-features = false }
sp-core = { version = "16.0.0" }
log = { workspace = true, features = ["std", "serde"] }
serde_json = { workspace = true }
serde = { workspace = true }
ethereum-types = { workspace = true }
reqwest = { workspace = true, features = ["blocking", "json"] }
tokio = { workspace = true, features = ["macros", "rt", "time"] }
env_logger = { workspace = true }
futures = { workspace = true }
async-trait = { workspace = true }
hex = { workspace = true }
toml = { workspace = true }
atomic_refcell = { workspace = true }
bitvec = { workspace = true }
primitive-types = { workspace = true }
prometheus = { workspace = true, features = ["process"] }
lazy_static = { workspace = true }
warp = { workspace = true }
dotenvy = { workspace = true }
min-max = { workspace = true }
backoff = { workspace = true }
tracing = { workspace = true }
